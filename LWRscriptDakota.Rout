
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # The goal of this script is to run a basic LWR model using the St. Paul working data...
> 
> # What working directory will it be in?
> # Try to put it in an "LWR" folder inside analysis.
> # Remember to save the data to "Data/R2GIS"
> require(foreign)
Loading required package: foreign
> require(multicore, quietly = TRUE)
> require(fields, quietly = TRUE)
Spam version 0.29-2 (2012-08-17) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following object(s) are masked from ‘package:base’:

    backsolve, forwardsolve

> 
> # the following command loads up some functions we'll use
> source("helper/LWRfunctions.R")
> 
> # BEDS + BATH + GARSQFT + get added or subtracted to compare the LWR model results with and without structural variables
> 
> MYMODELS = c("logSALE_VA~Air_Mean+BEDS + BATH + GARSQFT +FIN_SQ_FT+ACRES_POLY+YEAR_BUILT+HOME_STYLE+OWNOCC+factor(TimePeriod)",
+              "logSALE_VA~Air_Mean+BEDS + BATH + GARSQFT +FIN_SQ_FT+ACRES_POLY+YEAR_BUILT+HOME_STYLE+OWNOCC+PercWhite+PercU18+MED_INCOME+MCA3+LAKE_dist+PARK_dist+SHOP_dist+CBD_dist+factor(TimePeriod)",
+              "logSALE_VA~Air_Mean+BEDS + BATH + GARSQFT +FIN_SQ_FT+ACRES_POLY+YEAR_BUILT+HOME_STYLE+OWNOCC+PercWhite+PercU18+MED_INCOME+MCA3+LAKE_dist+PARK_dist+SHOP_dist+CBD_dist+factor(TimePeriod)+CITY")
> MYMODELsmall = "logSALE_VA~Air_Mean+BEDS + BATH + GARSQFT +FIN_SQ_FT+ACRES_POLY+YEAR_BUILT+HOME_STYLE+OWNOCC+factor(TimePeriod)"
> KVECTOR = c(25, 50, 75, 100, 150, 200, 400, 600, 800, 1000, 1500, 2000)
> 
> filePrefix = "../Data/R2GIS/CleanData/"
> #   inputFile = "Sales20052010.dbf"
> #   DATAFRAME = read.dbf(paste0(filePrefix, inputFile))
> #   dakOBS = which(DATAFRAME$COUNTY_ID == "037" & DATAFRAME$BEDS > 0 &  DATAFRAME$BATH > 0 & DATAFRAME$GARSQFT>0 )
> #   dakDATA = DATAFRAME[dakOBS, ]
> # outputFile = "dakotaCLEAN.dbf"
> # write.dbf(dakDATA, file = paste0(filePrefix, outputFile))
> dakDATA = read.dbf(paste0(filePrefix, "dakotaCLEAN.dbf"))
> obs2run = rownames(dakDATA)[which(dakDATA$TimePeriod>11)]
> 
> for (modelNum in 1:3) { #
+   MYMODEL = MYMODELS[modelNum]
+   start = Sys.time()
+ 
+   output.raw = mclapply(obs2run,
+                         LWRtimelag,
+                         Data.Frame = dakDATA,
+                         my.model = MYMODEL, my.modelSMALL = MYMODELsmall,
+                         kvector = KVECTOR,
+                         timelag = 12,
+                         mc.cores = 16
+                         )
+   end = Sys.time()
+   print(end - start)
+   # save the output in case something goes wrong later ?
+   # save(output.raw, inputFile, MYMODEL, file = paste0(filePrefix, dataSource, "LWRoutputRAW", Sys.Date(), ".RData"))
+ 
+   names(output.raw) = DATAFRAME$UNIQID[obs2run] #dakDATA
+   output = Reorganizer(output.raw)
+   save(output, inputFile, MYMODEL, file = paste0(filePrefix, "dakotaLWRoutput", modelNum+3, "-", Sys.Date(), ".RData"))
+   rm(output.raw)
+   gc()
+   print(gc())
+ }
[1] "1000"
[1] "5000"
[1] "6000"
[1] "7000"
[1] "8000"
[1] "9000"
Time difference of 9.835848 mins
           used  (Mb) gc trigger  (Mb)  max used  (Mb)
Ncells   434459  23.3    1590760  85.0   1590760  85.0
Vcells 25948234 198.0   79508272 606.6 124188867 947.5
[1] "1000"
[1] "5000"
[1] "6000"
[1] "7000"
[1] "8000"
[1] "9000"
Time difference of 10.60888 mins
           used  (Mb) gc trigger  (Mb)  max used  (Mb)
Ncells   434717  23.3    1590760  85.0   1590760  85.0
Vcells 27768971 211.9   79661836 607.8 124426850 949.4
[1] "1000"
[1] "5000"
[1] "6000"
[1] "7000"
[1] "8000"
[1] "9000"
Time difference of 12.41719 mins
           used  (Mb) gc trigger (Mb)  max used (Mb)
Ncells   434893  23.3    1590760   85   1590760   85
Vcells 30272301 231.0   87020663  664 135921131 1037
> 
> proc.time()
     user    system   elapsed 
28628.660   197.563  2028.138 
