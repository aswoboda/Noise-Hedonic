
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # The goal of this script is to run multiple LWR models using the St. Paul working data to find the best model
> 
> require(foreign)
Loading required package: foreign
> require(multicore, quietly = TRUE)
> require(fields, quietly = TRUE)
Spam version 0.29-2 (2012-08-17) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following object(s) are masked from ‘package:base’:

    backsolve, forwardsolve

> 
> # the following command loads up some functions we'll use
> source("helper/LWRfunctions.R")
> 
> MYMODELS = c("logSALE_VA~MAX+FIN_SQ_FT+ACRES_POLY+YEAR_BUILT+HOME_STYLE+OWNOCC",
+              "logSALE_VA~MAX+FIN_SQ_FT+ACRES_POLY+YEAR_BUILT+HOME_STYLE+OWNOCC+MED_INCOME+MCA3+LAKE_dist+PARK_dist+SHOP_dist+CBD_dist",
+              "logSALE_VA~MAX+FIN_SQ_FT+ACRES_POLY+YEAR_BUILT+HOME_STYLE+OWNOCC+MED_INCOME+MCA3+LAKE_dist+PARK_dist+SHOP_dist+CBD_dist+CITY")
> KVECTOR = c(25, 50, 75, 100, 125, 150, 175, 200, 225, 300, 400, 600, 800, 1000, 2000, 4000)
> 
> filePrefix = "../Data/R2GIS/CleanData/"
> inputFile = "Sales20052010.dbf"
> dataSource = strsplit(inputFile, "\\.")[[1]][1]
> 
> DATAFRAME = read.dbf(paste0(filePrefix, inputFile))
> N =  dim(DATAFRAME)[1]
> 
> TIMELAGS = c(6, 12, 24)
> inputVARS = expand.grid(models = MYMODELS, lags = TIMELAGS)
> 
> for (combo in 1:dim(inputVARS)[1]) { #
+   MYMODEL = as.character(inputVARS$models[combo])
+   TIMELAG = inputVARS$lags[combo]
+   obs2run = which(DATAFRAME$TimePeriod>(TIMELAG-1))
+   start = Sys.time()
+   output.raw = mclapply(obs2run,
+                         LWRtimelag,
+                         Data.Frame = DATAFRAME,
+                         my.model = MYMODEL, 
+                         my.modelSMALL = "logSALE_VA~MAX+FIN_SQ_FT+ACRES_POLY+YEAR_BUILT+HOME_STYLE+OWNOCC+MED_INCOME+MCA3+LAKE_dist+PARK_dist+SHOP_dist+CBD_dist", #substr(MYMODEL, 1, nchar(MYMODEL)-5),
+                         kvector = KVECTOR,
+                         timelag = TIMELAG,
+                         mc.cores = 16
+   )
+   end = Sys.time()
+   print(end - start)
+   
+   names(output.raw) = DATAFRAME$UNIQID[obs2run]
+   output = Reorganizer(output.raw)
+   save(output, inputFile, MYMODEL, TIMELAG, file = paste0(filePrefix, dataSource, "LWRmodel", combo, "-", Sys.Date(), ".RData"))
+   rm(output, output.raw)
+   gc()
+   print(gc())
+ }
[1] 1000
[1] 2000
[1] 3000
[1] 5000
[1] 6000
[1] 7000
[1] 9000
[1] 10000
[1] 11000
[1] 12000
[1] 14000
[1] 15000
[1] 16000
[1] 17000
[1] 18000
[1] 19000
[1] 21000
[1] 20000
[1] 22000
[1] 24000
[1] 25000
[1] 27000
[1] 28000
[1] 29000
[1] 30000
[1] 31000
[1] 32000
[1] 33000
[1] 34000
[1] 35000
[1] 36000
[1] 37000
[1] 38000
[1] 39000
[1] 40000
[1] 41000
[1] 42000
Time difference of 51.63064 mins
           used  (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells   414881  22.2   17034044  909.8  26615696 1421.5
Vcells 18608538 142.0  177051759 1350.8 276151925 2106.9
[1] 1000
[1] 2000
[1] 3000
[1] 5000
[1] 6000
[1] 7000
[1] 9000
[1] 10000
[1] 11000
[1] 12000
[1] 14000
[1] 15000
[1] 16000
[1] 17000
[1] 18000
[1] 19000
[1] 20000
[1] 21000
[1] 22000
[1] 25000
[1] 24000
[1] 27000
[1] 28000
[1] 29000
[1] 30000
[1] 31000
[1] 32000
[1] 33000
[1] 34000
[1] 35000
[1] 36000
[1] 37000
[1] 38000
[1] 39000
[1] 40000
[1] 41000
[1] 42000
Time difference of 1.058533 hours
           used  (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells   415011  22.2   22086514 1179.6  34510179 1843.1
Vcells 18608699 142.0  225355683 1719.4 351956647 2685.3
[1] 1000
[1] 2000
[1] 3000
[1] 5000
[1] 6000
[1] 7000
[1] 9000
[1] 10000
[1] 11000
[1] 12000
[1] 14000
[1] 15000
[1] 16000
[1] 17000
[1] 18000
[1] 19000
[1] 21000
[1] 20000
[1] 22000
[1] 24000
[1] 25000
[1] 27000
[1] 28000
[1] 29000
[1] 30000
[1] 31000
[1] 32000
[1] 33000
[1] 34000
[1] 35000
[1] 36000
[1] 37000
[1] 38000
[1] 39000
[1] 40000
[1] 41000
[1] 42000
Time difference of 1.908666 hours
           used  (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells   415011  22.2   57617915 3077.2  90027993 4808.1
Vcells 68940347 526.0  616981385 4707.2 963951406 7354.4
